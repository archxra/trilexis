import os
import requests
import re
import logging
import google.generativeai as genai
import urllib3
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackContext
from bs4 import BeautifulSoup

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ (–¥–ª—è –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
TELEGRAM_BOT_TOKEN = "8184665271:AAHaKGl4_gMqupv3XdIPpyE_IGKYpkwtRSM"
GEMINI_API_KEY = "AIzaSyANeHY9pIj82d3pUL6LLB5ffsORuE8Gk58"

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API-–∫–ª—é—á –¥–ª—è Gemini
genai.configure(api_key=GEMINI_API_KEY)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–¥–∫–æ–≥–æ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ Gemini API
def get_rare_word():
    model = genai.GenerativeModel("gemini-pro")
    prompt = "–î–∞–π –º–Ω–µ –æ–¥–Ω–æ —Ä–µ–¥–∫–æ–µ —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ. –ë–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–æ"
    
    response = model.generate_content(prompt)
    if response and response.text:
        return response.text.strip()
    return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ–≤–∞"

# **–î–æ–±–∞–≤–ª—è–µ–º –∫—É–∫–∏ —Å `sid` –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**
COOKIES = {
    "sid": "c0i4b22p13kjkh6vq98e1ve5g1"
}

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
def clean_translation(text):
    """–£–¥–∞–ª—è–µ—Ç —Å–∫–æ–±–∫–∏ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã."""
    return re.sub(r"[\(\)]", "", text).strip()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–ª–æ–≤–∞ –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫–∏–π —á–µ—Ä–µ–∑ sozdik.kz
def translate_to_kazakh(word):
    url = f"https://sozdik.kz/translate/ru/kk/{word}/"

    for attempt in range(3):  # –î–µ–ª–∞–µ–º –¥–æ 3 –ø–æ–ø—ã—Ç–æ–∫, –µ—Å–ª–∏ –ª–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω
        try:
            response = requests.get(url, cookies=COOKIES, verify=False)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–µ—Ä–Ω—É–ª –ª–∏ —Å–∞–π—Ç JSON —Å –æ—à–∏–±–∫–æ–π
            if response.headers.get("Content-Type") == "application/json":
                data = response.json()
                if data.get("result") == -90:  # –û—à–∏–±–∫–∞ "Translations limit exceed"
                    print(f"–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–µ–≤—ã—à–µ–Ω, –ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/3. –ñ–¥—É 5 —Å–µ–∫—É–Ω–¥...")
                    time.sleep(5)
                    continue  # –ü—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞

            if response.status_code == 200:
                soup = BeautifulSoup(response.text, "html.parser")
                translations = []

                # 1Ô∏è‚É£ **–ü–µ—Ä–µ–≤–æ–¥ –≤ `<summary>` –≤–Ω—É—Ç—Ä–∏ `<a class="ig_local">`**
                for summary in soup.find_all("summary"):
                    for abbr in summary.find_all("abbr"):
                        abbr.extract()  # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ <abbr>

                    explanation_tag = summary.find("em")
                    explanation = explanation_tag.text.strip() if explanation_tag else "–ë–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏—è"

                    if explanation_tag:
                        explanation_tag.extract()  # –£–¥–∞–ª—è–µ–º <em>, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Å–ª–æ–≤–∞ –≤–Ω—É—Ç—Ä–∏ <a class="ig_local">
                    local_translations = [a.text.strip() for a in summary.find_all("a", class_="ig_local")]

                    if local_translations:
                        translations.append(f"{explanation}: {', '.join(local_translations)}")

                # 2Ô∏è‚É£ **–ü–µ—Ä–µ–≤–æ–¥ –≤ `<em>` –≤–Ω—É—Ç—Ä–∏ `<p>` (—É–±–∏—Ä–∞–µ–º —Å–∫–æ–±–∫–∏)**
                for p_tag in soup.find_all("p"):
                    em_tags = p_tag.find_all("em")
                    for em in em_tags:
                        translation = clean_translation(em.text)  # –£–±–∏—Ä–∞–µ–º —Å–∫–æ–±–∫–∏
                        if translation:
                            translations.append(translation)

                # 3Ô∏è‚É£ **–ü–µ—Ä–µ–≤–æ–¥ –≤ `<p>` –±–µ–∑ `<abbr>`**
                for p_tag in soup.find_all("p"):
                    for abbr in p_tag.find_all("abbr"):
                        abbr.extract()  # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ <abbr>

                    kazakh_translation = p_tag.text.strip()
                    if kazakh_translation:
                        translations.append(kazakh_translation)

                if translations:
                    return "\n".join(translations)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫–∏–π: {e}")

    return "–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"  # –ï—Å–ª–∏ –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–ª–æ–≤–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —á–µ—Ä–µ–∑ WooordHunt
def translate_to_english(word):
    url = f"https://wooordhunt.ru/word/{word}"
    
    try:
        response = requests.get(url, verify=False)  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        
        if response.status_code == 200:
            soup = BeautifulSoup(response.text, "html.parser")
            translations = set()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤

            # 1Ô∏è‚É£ –ü–æ–∏—Å–∫ –≤ <p class="t_inline"> (–∫–∞–∫ –≤ "–•–ª—è–±—å")
            p_tag = soup.find("p", class_="t_inline")
            if p_tag:
                words = p_tag.text.strip().split(", ")  # –†–∞–∑–±–∏–≤–∞–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å –¥—É–±–ª–∏
                translations.update(words[:1])  # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ

            # 2Ô∏è‚É£ –ü–æ–∏—Å–∫ –≤—Å–µ—Ö <a> –≤–Ω—É—Ç—Ä–∏ <div id="wd_content">
            content_block = soup.find("div", id="wd_content", class_="ru_content")
            if content_block:
                for a_tag in content_block.find_all("a"):
                    word = a_tag.text.strip()
                    if word.isalpha():  # –§–∏–ª—å—Ç—Ä—É–µ–º, —á—Ç–æ–±—ã –±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞
                        translations.add(word)

            if translations:
                return ", ".join(sorted(translations))  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π: {e}")

    return "–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"

# –ö–æ–º–∞–Ω–¥–∞ /word –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–¥–∫–æ–≥–æ —Å–ª–æ–≤–∞
async def word(update: Update, context: CallbackContext) -> None:
    word_info = get_rare_word()
    
    word = word_info.strip()
    meaning = "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"

    kazakh_translation = translate_to_kazakh(word)
    english_translation = translate_to_english(word)
    
    message = (
        f"üìñ *–°–ª–æ–≤–æ –¥–Ω—è:* {word.strip()}\n\n"
        f"üìú *–ó–Ω–∞—á–µ–Ω–∏–µ:* {meaning.strip()}\n"
        f"üá∞üáø *–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫–∏–π:* {kazakh_translation}\n"
        f"üá¨üáß *–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π:* {english_translation}"
    )
    
    await update.message.reply_text(message, parse_mode="Markdown")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("word", word))
    app.run_polling()

if __name__ == "__main__":
    main()