import os
import requests
import re
import json
import logging
import google.generativeai as genai
import urllib3
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackContext
from bs4 import BeautifulSoup
import time
import threading

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–µ (–¥–ª—è –ø—Ä–æ—Ç–æ—Ç–∏–ø–∞)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
TELEGRAM_BOT_TOKEN = "8184665271:AAHaKGl4_gMqupv3XdIPpyE_IGKYpkwtRSM"
GEMINI_API_KEY = "AIzaSyANeHY9pIj82d3pUL6LLB5ffsORuE8Gk58"

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API-–∫–ª—é—á –¥–ª—è Gemini
genai.configure(api_key=GEMINI_API_KEY)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

subscribed_chats = set()  # –•—Ä–∞–Ω–∏–º ID —á–∞—Ç–æ–≤, –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–ª–æ–≤–∞

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–¥–∫–æ–≥–æ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ Gemini API
def get_rare_word():
    model = genai.GenerativeModel("gemini-pro")
    prompt = "–î–∞–π –º–Ω–µ –æ–¥–Ω–æ —Ä–µ–¥–∫–æ–µ —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ. –ë–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–æ"
    
    response = model.generate_content(prompt)
    if response and response.text:
        return response.text.strip()
    return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ–≤–∞"

# **–î–æ–±–∞–≤–ª—è–µ–º –∫—É–∫–∏ —Å `sid` –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**
COOKIES = {
    "sid": "q3opq07hg5e0v0mn41id0q60lc"
}

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
def clean_translation(text):
    """–£–¥–∞–ª—è–µ—Ç —Å–∫–æ–±–∫–∏ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã."""
    return re.sub(r"[\(\)]", "", text).strip()

def parse_translation_arrow(text):
    """–ü–∞—Ä—Å–∏—Ç –ø–µ—Ä–µ–≤–æ–¥ –ø–æ—Å–ª–µ —Å–∏–º–≤–æ–ª–∞ `‚Üí`"""
    if "‚Üí" in text:
        return text.split("‚Üí", 1)[1].strip()
    return None  # –ï—Å–ª–∏ `‚Üí` –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º `None`

def translate_to_kazakh(word):
    url = f"https://sozdik.kz/translate/ru/kk/{word}/"

    for attempt in range(3):
        try:
            response = requests.get(url, cookies=COOKIES, verify=False)

            if response.status_code == 200:
                soup = BeautifulSoup(response.text, "html.parser")

                # 6Ô∏è‚É£ **–ü–µ—Ä–µ–≤–æ–¥ –≤ <summary> –±–µ–∑ <a>, –≥–¥–µ –Ω—É–∂–Ω–æ–µ —Å–ª–æ–≤–æ –Ω–µ –≤ —Ç–µ–≥–µ**
                for summary in soup.find_all("summary"):
                    for abbr in summary.find_all("abbr"):
                        abbr.extract()  # –£–¥–∞–ª—è–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ <abbr>
                    for em in summary.find_all("em"):
                        em.extract()

                    # –ë–µ—Ä—ë–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç –±–µ–∑ —Ç–µ–≥–æ–≤
                    clean_text = summary.text.strip()
                    clean_text = clean_text.replace("1)", "")
                    if clean_text:
                        return clean_text

                # 1Ô∏è‚É£ –ü–µ—Ä–µ–≤–æ–¥ –≤ <summary> –≤–Ω—É—Ç—Ä–∏ <a class="ig_local">
                for summary in soup.find_all("summary"):
                    local_translations = [a.text.strip() for a in summary.find_all("a")]
                    if local_translations:
                        return local_translations[0]

                # 2Ô∏è‚É£ –ü–µ—Ä–µ–≤–æ–¥ –≤ <p> –±–µ–∑ <abbr>, <em>
                for p_tag in soup.find_all("p"):
                    for abbr in p_tag.find_all("abbr"):
                        abbr.extract()
                    for em in p_tag.find_all("em"):
                        em.extract()
                    kazakh_translation = p_tag.text.strip()
                    if kazakh_translation:
                        return kazakh_translation

                # 3Ô∏è‚É£ –ü–µ—Ä–µ–≤–æ–¥ –≤ <em> –≤–Ω—É—Ç—Ä–∏ <p>
                for p_tag in soup.find_all("p"):
                    em_tags = p_tag.find_all("em")
                    for em in em_tags:
                        translation = em.text.strip()
                        if translation:
                            return translation

                # 4Ô∏è‚É£ –ü–µ—Ä–µ–≤–æ–¥ –≤ <p> –≤–Ω—É—Ç—Ä–∏ <a class="ig_local"> (–∫–∞–∫ –≤ "–±–ª–∞–≥–æ–≤–µ—Å—Ç")
                for p_tag in soup.find_all("p"):
                    a_tag = p_tag.find_all("a")
                    if a_tag:
                        return a_tag[0].text.strip()

                # 5Ô∏è‚É£ –ü–µ—Ä–µ–≤–æ–¥ –ø–æ—Å–ª–µ `‚Üí` –≤ JSON
                if "translation" in response.text:
                    arrow_translation = parse_translation_arrow(response.text)
                    if arrow_translation:
                        return arrow_translation

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫–∏–π: {e}")

    return "–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–ª–æ–≤–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —á–µ—Ä–µ–∑ WooordHunt
def translate_to_english(word):
    url = f"https://wooordhunt.ru/word/{word}"

    try:
        response = requests.get(url, verify=False)  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞

        if response.status_code == 200:
            soup = BeautifulSoup(response.text, "html.parser")
            translations = set()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤

            # 1Ô∏è‚É£ **–ü–æ–∏—Å–∫ –≤ `<p class="t_inline">`** (–∫–∞–∫ –≤ "–•–ª—è–±—å")
            p_tag = soup.find("p", class_="t_inline")
            if p_tag:
                words = p_tag.text.strip().split(", ")  # –†–∞–∑–±–∏–≤–∞–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å –¥—É–±–ª–∏
                translations.update(words[:1])  # –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ

            # 2Ô∏è‚É£ **–ü–æ–∏—Å–∫ –≤—Å–µ—Ö `<a>` –≤–Ω—É—Ç—Ä–∏ `<div id="wd_content">`**
            content_block = soup.find("div", id="wd_content", class_="ru_content")
            if content_block:
                for a_tag in content_block.find_all("a"):
                    word = a_tag.text.strip()
                    if word.isalpha():  # –§–∏–ª—å—Ç—Ä—É–µ–º, —á—Ç–æ–±—ã –±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞
                        translations.add(word)

            # 3Ô∏è‚É£ **–ü–æ–∏—Å–∫ –ø–µ—Ä–≤–æ–≥–æ `<span>` –≤–Ω—É—Ç—Ä–∏ `<div class="word_ex word_ex_sup">`**
            example_block = soup.find("div", class_="word_ex word_ex_sup")
            if example_block:
                span_tag = example_block.find("span")  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π `<span>`
                if span_tag:
                    translations.add(span_tag.text.strip())  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç

            if translations:
                tr = list(translations)
                filtered_tr = [word for word in tr if not re.search(r'[–∞-—è–ê-–Ø]', word)]
                return "; ".join(filtered_tr)  # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π: {e}")

    return "–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ Gemini
def get_word_meaning(word):
    model = genai.GenerativeModel("gemini-pro")
    prompt = f"–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —Å–ª–æ–≤–æ '{word}'? –î–∞–π –∫—Ä–∞—Ç–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ."

    response = model.generate_content(prompt)
    if response and response.text:
        return response.text.strip()
    return "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

# –ö–æ–º–∞–Ω–¥–∞ /word –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–¥–∫–æ–≥–æ —Å–ª–æ–≤–∞
async def word(update: Update, context: CallbackContext) -> None:
    word_info = get_rare_word()
    
    word = word_info.strip()
    meaning = get_word_meaning(word)  # –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞

    kazakh_translation = translate_to_kazakh(word)
    english_translation = translate_to_english(word)

    message = (
        f"üìñ *–°–ª–æ–≤–æ –¥–Ω—è:* {word}\n\n"
        f"üìú *–ó–Ω–∞—á–µ–Ω–∏–µ:* {meaning}\n"
        f"üá∞üáø *–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫–∏–π:* {kazakh_translation}\n"
        f"üá¨üáß *–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π:* {english_translation}"
    )

    print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{message}")
    await update.message.reply_text(message, parse_mode="Markdown")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–ª–æ–≤–∞
def dailyword_thread(app: Application):
    while True:
        time.sleep(86400)  # –ñ–¥—ë–º 24 —á–∞—Å–∞
        word_info = get_rare_word()
        word = word_info.strip()
        meaning = get_word_meaning(word)
        kazakh_translation = translate_to_kazakh(word)
        english_translation = translate_to_english(word)

        message = (
            f"üìñ *–°–ª–æ–≤–æ –¥–Ω—è:* {word}\n\n"
            f"üìú *–ó–Ω–∞—á–µ–Ω–∏–µ:* {meaning}\n"
            f"üá∞üáø *–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫–∏–π:* {kazakh_translation}\n"
            f"üá¨üáß *–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π:* {english_translation}"
        )

        for chat_id in subscribed_chats:
            app.bot.send_message(chat_id=chat_id, text=message, parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–ª–æ–≤–∞
async def subscribe(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    subscribed_chats.add(chat_id)
    await update.message.reply_text("–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Å–ª–æ–≤–∞!")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏
    word_info = get_rare_word()
    word = word_info.strip()
    meaning = get_word_meaning(word)
    kazakh_translation = translate_to_kazakh(word)
    english_translation = translate_to_english(word)

    message = (
        f"üìñ *–°–ª–æ–≤–æ –¥–Ω—è:* {word}\n\n"
        f"üìú *–ó–Ω–∞—á–µ–Ω–∏–µ:* {meaning}\n"
        f"üá∞üáø *–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫–∏–π:* {kazakh_translation}\n"
        f"üá¨üáß *–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π:* {english_translation}"
    )
    await update.message.reply_text(message, parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏
async def unsubscribe(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    subscribed_chats.discard(chat_id)
    await update.message.reply_text("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–ª–æ–≤.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("word", word))
    app.add_handler(CommandHandler("subscribe", subscribe))
    app.add_handler(CommandHandler("unsubscribe", unsubscribe))

    threading.Thread(target=dailyword_thread, args=(app,), daemon=True).start()
    
    app.run_polling()
if __name__ == "__main__":
    main()