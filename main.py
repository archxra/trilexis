import os
import requests
import re
import logging
import google.generativeai as genai
import urllib3
import tempfile
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler
from bs4 import BeautifulSoup

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ API
TELEGRAM_BOT_TOKEN = "8184665271:AAHaKGl4_gMqupv3XdIPpyE_IGKYpkwtRSM"
GEMINI_API_KEY = "AIzaSyANeHY9pIj82d3pUL6LLB5ffsORuE8Gk58"
IAM_TOKEN = "t1.9eudzZ2NlMyOm82Uk5OXlpGcis-Rye3rnc2djceOypKcnpqNkY2ekJuNj5Dl8_cIF2FC-e9iEDom_t3z90hFXkL572IQOib-zef1653NnYyelMzOyoqbzcfIiZ2Jl8yY7_zF653NnYyelMzOyoqbzcfIiZ2Jl8yY.Zdumu7Qq3ol3Tvdb8UD87RmvT8any-oXAykwVeVAZuOZbPg5avwo2zT1ejAMSxMUl7GKLlDEqmILGTvw5lhrDw"  # üîπ Yandex IAM-—Ç–æ–∫–µ–Ω
FOLDER_ID = "ao777nqtbemrohksilrt"  # üîπ Yandex Folder ID

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Google Gemini API
genai.configure(api_key=GEMINI_API_KEY)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)

# üîπ –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–¥–∫–æ–≥–æ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ Gemini API
def get_rare_word():
    model = genai.GenerativeModel("gemini-pro")
    prompt = "–î–∞–π –º–Ω–µ –æ–¥–Ω–æ —Ä–µ–¥–∫–æ–µ —Ä—É—Å—Å–∫–æ–µ —Å–ª–æ–≤–æ. –ë–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π, —Ç–æ–ª—å–∫–æ —Å–ª–æ–≤–æ"
    response = model.generate_content(prompt)
    if response and response.text:
        return response.text.strip()
    return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–æ–≤–∞"

# üîπ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫–∏–π —á–µ—Ä–µ–∑ sozdik.kz
COOKIES = {"sid": "q3opq07hg5e0v0mn41id0q60lc"}

def translate_to_kazakh(word):
    url = f"https://sozdik.kz/translate/ru/kk/{word}/"
    for attempt in range(3):
        try:
            response = requests.get(url, cookies=COOKIES, verify=False)
            if response.status_code == 200:
                soup = BeautifulSoup(response.text, "html.parser")

                # 1Ô∏è‚É£ –ü–µ—Ä–µ–≤–æ–¥ –≤–Ω—É—Ç—Ä–∏ <summary>
                for summary in soup.find_all("summary"):
                    local_translations = [a.text.strip() for a in summary.find_all("a")]
                    if local_translations:
                        return local_translations[0]

                # 2Ô∏è‚É£ –ü–µ—Ä–µ–≤–æ–¥ –≤ <p> –±–µ–∑ <abbr>
                for p_tag in soup.find_all("p"):
                    for abbr in p_tag.find_all("abbr"):
                        abbr.extract()
                    kazakh_translation = p_tag.text.strip()
                    if kazakh_translation:
                        return kazakh_translation

                # 3Ô∏è‚É£ –ü–µ—Ä–µ–≤–æ–¥ –≤ <em> –≤–Ω—É—Ç—Ä–∏ <p>
                for p_tag in soup.find_all("p"):
                    em_tags = p_tag.find_all("em")
                    for em in em_tags:
                        translation = em.text.strip()
                        if translation:
                            return translation

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫–∏–π: {e}")
    return "–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"

# üîπ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —á–µ—Ä–µ–∑ WooordHunt
def translate_to_english(word):
    url = f"https://wooordhunt.ru/word/{word}"
    try:
        response = requests.get(url, verify=False)
        if response.status_code == 200:
            soup = BeautifulSoup(response.text, "html.parser")
            translations = set()

            # 1Ô∏è‚É£ –ü–æ–∏—Å–∫ –≤ <p class="t_inline">
            p_tag = soup.find("p", class_="t_inline")
            if p_tag:
                words = p_tag.text.strip().split(", ")
                translations.update(words[:1])

            # 2Ô∏è‚É£ –ü–æ–∏—Å–∫ –ø–µ—Ä–≤–æ–≥–æ <span> –≤–Ω—É—Ç—Ä–∏ <div class="word_ex word_ex_sup">
            example_block = soup.find("div", class_="word_ex word_ex_sup")
            if example_block:
                span_tag = example_block.find("span")
                if span_tag:
                    translations.add(span_tag.text.strip())

            if translations:
                tr = list(translations)
                filtered_tr = [w for w in tr if not re.search(r'[–∞-—è–ê-–Ø]', w)]
                return "; ".join(filtered_tr)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π: {e}")
    return "–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"

# üîπ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—á–∏ —á–µ—Ä–µ–∑ Yandex SpeechKit
def generate_audio(text, lang):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é Yandex SpeechKit (REST API)."""
    
    voice_mapping = {"ru": "oksana", "kk": "daulet", "en": "nick"}  # –î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞
    voice = voice_mapping.get(lang, "oksana")  # –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–µ—Ä—ë–º —Ä—É—Å—Å–∫–∏–π

    url = "https://tts.api.cloud.yandex.net/speech/v1/tts:synthesize"
    headers = {"Authorization": f"Bearer {IAM_TOKEN}", "x-folder-id": FOLDER_ID}
    params = {
        "text": text,
        "voice": voice,
        "folderId": FOLDER_ID,
        "lang": lang
    }

    response = requests.post(url, headers=headers, params=params)
    
    if response.status_code == 200:
        with tempfile.NamedTemporaryFile(delete=False, suffix=".ogg") as f:
            temp_filename = f.name
            f.write(response.content)
        return temp_filename  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    else:
        print(f"–û—à–∏–±–∫–∞ Yandex SpeechKit: {response.text}")
        return None  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–µ—Ä–Ω—ë—Ç `None`

# üîπ –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
def create_inline_keyboard(kazakh, english):
    kazakh_words = [w.strip() for w in kazakh.split(";") if w.strip()]
    english_words = [w.strip() for w in english.split(";") if w.strip()]
    keyboard = []
    
    # ‚úÖ –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É callback_data –¥–æ 64 —Å–∏–º–≤–æ–ª–æ–≤ –∏ —É–±–∏—Ä–∞–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    def sanitize_callback_data(word, lang):
        clean_word = re.sub(r"[^a-zA-Z–∞-—è–ê-–Ø—ë–Å“£“õ“Ø“±”©“ª—ñ“ì”ô“£“ö“∞“Æ”®“∫–Ü“í”ò ]", "", word)  # –£–±–∏—Ä–∞–µ–º –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        return f"TTS_{lang}:{clean_word[:60]}"  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É (60 —Å–∏–º–≤–æ–ª–æ–≤ + "TTS_KK:")

    if kazakh_words:
        row = [InlineKeyboardButton(text=word, callback_data=sanitize_callback_data(word, "KK")) for word in kazakh_words]
        keyboard.append(row)
    
    if english_words:
        row = [InlineKeyboardButton(text=word, callback_data=sanitize_callback_data(word, "EN")) for word in english_words]
        keyboard.append(row)
    
    return InlineKeyboardMarkup(keyboard)


# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def tts_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    if data.startswith("TTS_KK:"):
        word_to_speak = data.split(":", 1)[1]
        lang = "kk"
    elif data.startswith("TTS_EN:"):
        word_to_speak = data.split(":", 1)[1]
        lang = "en"
    elif data.startswith("TTS_RU:"):
        word_to_speak = data.split(":", 1)[1]
        lang = "ru"
    else:
        return
    
    filename = generate_audio(word_to_speak, lang)
    if filename:
        with open(filename, "rb") as audio:
            await query.message.reply_voice(voice=audio)
        os.remove(filename)


# üîπ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–æ–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def word(update: Update, context: CallbackContext):
    word = get_rare_word().strip()
    kazakh_translation = translate_to_kazakh(word)
    english_translation = translate_to_english(word)
    message = f"üìñ *–°–ª–æ–≤–æ –¥–Ω—è:* {word}\n\nüá∞üáø *–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫–∏–π:* {kazakh_translation}\nüá¨üáß *–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π:* {english_translation}"
    keyboard = create_inline_keyboard(kazakh_translation, english_translation)
    await update.message.reply_text(message, parse_mode="Markdown", reply_markup=keyboard)

# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("word", word))
    app.add_handler(CallbackQueryHandler(tts_callback))
    app.run_polling()

if __name__ == "__main__":
    main()
